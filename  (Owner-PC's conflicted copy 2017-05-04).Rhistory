PAT.SEX,
DATE.OF.BIRTH,
PAT.HDWA.MRN, #SLK
MEDICARE.NO,
MEDICARE.REF.NO,
MEDICARE.EXPIRY,
OLD.PENSION.NO,
FORENAMES,
SURNAME,
ADDR.1,
ADDR.2,
PHONE,
KIN.NAME1,
BIRTHPLACE,
MOBILE.PHONE,
WORK.PHONE,
EMERGENCY.CONTACT.NAME,
EMERGENCY.CONTACT.PHONE,
HCC.EXPIRY,
FULL.NAME,
ABORIGINAL,
CRN.NO]
Dir_Names_usedcols
Communicare_Vital<-Communicare[
PAT.ID]
Communicare_Vital<-Communicare[
"PAT.ID"]
Communicare_Vital<-Communicare[
"PAT.ID",
"PAT.SEX",
"DATE.OF.BIRTH",
"PAT.HDWA.MRN", #SLK
"MEDICARE.NO",
"MEDICARE.REF.NO",
"MEDICARE.EXPIRY",
"OLD.PENSION.NO",
"FORENAMES",
"SURNAME",
"ADDR.1",
"ADDR.2",
"PHONE",
"KIN.NAME1",
"BIRTHPLACE",
"MOBILE.PHONE",
"WORK.PHONE",
"EMERGENCY.CONTACT.NAME",
"EMERGENCY.CONTACT.PHONE",
"HCC.EXPIRY",
"FULL.NAME",
"ABORIGINAL",
"CRN.NO"]
Communicare_Vital<-Communicare[
"PAT.ID",
"PAT.SEX"]
View(Team)
Communicare_Vital<-Communicare[
"PAT.ID"
"PAT.SEX"]
Communicare_Vital<-Communicare[c()
"PAT.ID",
"PAT.SEX",
"DATE.OF.BIRTH",
"PAT.HDWA.MRN", #SLK
"MEDICARE.NO",
"MEDICARE.REF.NO",
"MEDICARE.EXPIRY",
"OLD.PENSION.NO",
"FORENAMES",
"SURNAME",
"ADDR.1",
"ADDR.2",
"PHONE",
"KIN.NAME1",
"BIRTHPLACE",
"MOBILE.PHONE",
"WORK.PHONE",
"EMERGENCY.CONTACT.NAME",
"EMERGENCY.CONTACT.PHONE",
"HCC.EXPIRY",
"FULL.NAME",
"ABORIGINAL",
"CRN.NO")]
Communicare_Vital<-Communicare[c(
"PAT.ID",
"PAT.SEX",
"DATE.OF.BIRTH",
"PAT.HDWA.MRN", #SLK
"MEDICARE.NO",
"MEDICARE.REF.NO",
"MEDICARE.EXPIRY",
"OLD.PENSION.NO",
"FORENAMES",
"SURNAME",
"ADDR.1",
"ADDR.2",
"PHONE",
"KIN.NAME1",
"BIRTHPLACE",
"MOBILE.PHONE",
"WORK.PHONE",
"EMERGENCY.CONTACT.NAME",
"EMERGENCY.CONTACT.PHONE",
"HCC.EXPIRY",
"FULL.NAME",
"ABORIGINAL",
"CRN.NO")]
View(Communicare_Vital)
Communicare_useful<-Communicare[c(
SERVICE.PROVIDER.NO,
MORB.TYPE.SHORT.DESC,
MORB.TYPE.SHORT.DESC.UC,
SYS.CODE,
ICPC.CODE,
NAT.LAN.TERM,
MORB.RIGHT.NO,
PREG.COMPLICATION,
UNIQUE.ID,
PAT.ID.1,
LOCALITY.NO,
AB.TYPE.NO,
KIN.TYPE1,
CURRENT.STATUS,
EMERGENCY.CONTACT.TYPE,
HIC.BULK.ELIGIBLE,
FIRST.FORENAME,
MARITAL.STATUS.NO,
LANGUAGE.NO,
BIRTH.CTRY.NO,
CENTRELINK.TYPE.CODE,
HCC.NO, #double up with CRN.NO
DOB.ESTIMATED, #t/f tickbox
HIC.ELIGIBILITY.LAST.CHECKED,
NTHC.SEND.DRUG.ALLERGY,
LANGUAGE.HOME.NO,
NO.KNOWN.REACTIONS,
CTG.REGISTERED,
BP.IMPORTED.PAT.ID,
PREFERRED.CONTACT,
HAS.NO.PHONE,
RECORD.STORAGE.SITE.NO,
HIC.BULK.BILL,
HIC.CLAIM.STATUS,
HIC.DB4.PRINTED,
HIC.NON.CLAIMABLE,
REASON.MORB.NO,
PROVIDER.NO.1,
SPECIALITY.TYPE.NO,
D.GENDER, #dr gender?
DOH.PRESCRIBER.NO,
QUALIFICATIONS,
TITLE, #of dr
BP.USERID)]
Communicare_useful<-Communicare[c(
"SERVICE.PROVIDER.NO",
"MORB.TYPE.SHORT.DESC",
"MORB.TYPE.SHORT.DESC.UC",
"SYS.CODE",
"ICPC.CODE",
"NAT.LAN.TERM",
"MORB.RIGHT.NO",
"PREG.COMPLICATION",
"UNIQUE.ID",
"PAT.ID.1",
"LOCALITY.NO",
"AB.TYPE.NO",
"KIN.TYPE1",
"CURRENT.STATUS",
"EMERGENCY.CONTACT.TYPE",
"HIC.BULK.ELIGIBLE",
"FIRST.FORENAME",
"MARITAL.STATUS.NO",
"LANGUAGE.NO",
"BIRTH.CTRY.NO",
"CENTRELINK.TYPE.CODE",
"HCC.NO", #double up with CRN.NO
"DOB.ESTIMATED", #t/f tickbox
"HIC.ELIGIBILITY.LAST.CHECKED",
"NTHC.SEND.DRUG.ALLERGY",
"LANGUAGE.HOME.NO",
"NO.KNOWN.REACTIONS",
"CTG.REGISTERED",
"BP.IMPORTED.PAT.ID",
"PREFERRED.CONTACT",
"HAS.NO.PHONE",
"RECORD.STORAGE.SITE.NO",
"HIC.BULK.BILL",
"HIC.CLAIM.STATUS",
"HIC.DB4.PRINTED",
"HIC.NON.CLAIMABLE",
"REASON.MORB.NO",
"PROVIDER.NO.1",
"SPECIALITY.TYPE.NO",
"D.GENDER", #dr gender?
"DOH.PRESCRIBER.NO",
"QUALIFICATIONS",
"TITLE", #of dr
"BP.USERID")]
testnames <- names(Communicare)
testnames
rm(testnames)
Communicare_trash <- Communicare - c(Communicare_useful,Communicare_Vital)
Communicare_trash <- Communicare - [c(Communicare_useful,Communicare_Vital)]
Communicare_trash <- Communicare - c(Communicare_useful,Communicare_Vital)
Communicare_trash <- Communicare - (Communicare_useful + Communicare_Vital)
Communicare_trash <- Communicare - (Communicare_useful,Communicare_Vital)
Communicare_trash <- Communicare - Communicare_useful
Communicare_trash <- Communicare(-c(Communicare_useful,Communcare_vital))
Communicare_trash <- Communicare[-c(Communicare_useful,Communcare_vital)]
Communicare_trash <- Communicare[-c(Communicare_useful,Communicare_vital)]
Communicare_trash <- Communicare[-c(Communicare_useful,Communicare_Vital)]
Communicare_trash <- subset(Communicare, select = -c(Communicare_useful,Communicare_Vital)
Communicare_trash <- subset(Communicare, select = -c(Communicare_useful,Communicare_Vital))
Communicare_trash <- subset(Communicare, select = -c(Communicare_useful,Communicare_Vital))
Communicare_trash <- within(Communicare, rm(Communicare_useful,Communicare_Vital))
Communicare_trash <- within(Communicare, rm(names(Communicare_useful),names(Communicare_Vital))
Communicare_trash <- within(Communicare, rm(names(Communicare_useful),names(Communicare_Vital)))
Communicare_trash <- within(Communicare, rm(names(Communicare_useful),names(Communicare_Vital)))
Communicare_trash <- within(Communicare, rm(Communicare_useful,Communicare_Vital))
Communicare_Vital_N<-names(Communicare_Vital)
Communicare_Vital_N
Communicare_useful_N<-names(Communicare_useful)
Communicare_trash <- within(Communicare, rm(Communicare_useful,Communicare_Vital))
Communicare_trash <- within(Communicare, rm(Communicare_useful_N,Communicare_Vital_N))
Communicare_trash <- within(Communicare, rm(Communicare_useful_N))
Communicare_trash <- within.data.frame(Communicare, rm(Communicare_useful_N,Communicare_Vital_N))#why no work?
Communicare_trash <- within.data.frame(Communicare, rm(Communicare_useful,Communicare_Vital))#why no work?
str(Communicare)
?drop
DF <- data.frame(
x=1:10,
y=10:1,
z=rep(5,10),
a=11:20
)
View(DF)
drops <- c("x","z")
View(DF)
Communicare_trash <- within(Communicare, rm("Communicare_useful", "Communicare_Vital"))#why no work?
Communicare_trash <- subset(Communicare, select = -c("Communicare_useful","Communicare_Vital"))
Communicare_trash <- Communicare[-c("Communicare_useful","Communicare_Vital")]
DF[ , !(names(DF) %in% drops)]
drops <- c("Communicare_useful","Communicare_Vital")
Communicare_trash <- Communicare[ , !(names(Communicare) %in% drops)]
drops
Communicare_trash <- Communicare[ , !(names(Communicare) %in% Communicare_useful)]
Communicare_trash <- Communicare[ , !(colnames(Communicare) %in% Communicare_useful)]
Communicare_trash <- Communicare[ , !(colnames(Communicare) %in% Communicare_Vital)]
View(Communicare_trash)
View(Communicare_Vital)
Communicare_trash <- Communicare[ , !(colnames(Communicare) %in% c(Communicare_Vital, Communicare_useful)]
Communicare_trash <- Communicare[ , !(colnames(Communicare) %in% c(Communicare_Vital, Communicare_useful))]
Communicare_trash <- Communicare[ , !(names(Communicare) %in% Communicare_useful_N)]
Communicare_trash <- Communicare[ , !(names(Communicare) %in% Communicare_Vital_N)]
Communicare_trash <- Communicare[ , !(names(Communicare) %in% c(Communicare_Vital_N,Communicare_useful_N)]
Communicare_trash <- Communicare[ , !(names(Communicare) %in% c(Communicare_Vital_N,Communicare_useful_N))]
View(Communicare_trash)
save.image()
write.csv(Communicare_Vital, file = "Communicare_Vital.csv")
write.csv(Communicare_useful, file = "Communicare_useful.csv")
write.csv(Communicare_trash, file = "Communicare_trash.csv")
rm(DF)
View(FamilyHistory)
View(GP)
View(HealthCareCard)
View(ICD10)
View(ICPC)
View(NOK)
View(Referral)
View(Referral_BoiMH)
View(Session)
View(Staff)
View(StaffTeam)
View(Team)
View(HealthCareCard)
View(ClientDemographics)
View(ClientDemographics)
View(NOK)
View(HealthCareCard)
View(ClientGP)
View(ClientOtherLanguage)
View(GP)
View(ClientGP)
View(ClientGP)
View(GP)
View(Referral)
View(GP)
View(ClientGP)
View(Referral)
View(ICD10)
View(ICPC)
View(FamilyHistory)
View(GP)
View(ClientGP)
View(ClientDemographics)
View(ClientDemographics)
View(Staff)
Communicare_empty <- DirectionsClinicalExtract[ , !(names(DirectionsClinicalExtract) %in% Communicare.names)]
View(Communicare_empty)
Communicare_empty <- DirectionsClinicalExtract[ , !(names(DirectionsClinicalExtract) %in% names(Communicare))]
write.csv(Communicare_empty, file = "Communicare_empty.csv")
Sex<-DirectionsClinicalExtract$PAT.SEX
ClientDemographics$Sex <- rbind(ClientDemographics$Sex,Sex)
View(ClientDemographics)
View(DirectionsClinicalExtract)
Sex<-data.frame(DirectionsClinicalExtract$PAT.SEX)
ClientDemographics$Sex <- rbind(ClientDemographics$Sex,Sex)
View(Sex)
?data.drame
?data.frame
Sex<-data.frame(DirectionsClinicalExtract$PAT.SEX,check.names = FALSE)
ClientDemographics$Sex <- rbind(ClientDemographics$Sex,Sex)
View(Sex)
?merge
ClientDemographics$Sex_n<-merge(ClientDemographics$Sex,DirectionsClinicalExtract$PAT.SEX)
?names
names(DirectionsClinicalExtract)[names(DirectionsClinicalExtract)=="PAT.SEX"] <- "Sex"
DirectionsClinicalExtract$Sex
ClientDemographics$Sex <- rbind(ClientDemographics$Sex,DirectionsClinicalExtract$Sex)
ClientDemographics <- rbind(ClientDemographics$Sex,DirectionsClinicalExtract$Sex)
rbind(ClientDemographics$Sex,DirectionsClinicalExtract$Sex)
blah <- rbind(ClientDemographics,DirectionsClinicalExtract)
?append
append(1:5, 0:1, after = 3)
append(1:5, 0:1)
blah<-append(DirectionsClinicalExtract$Sex, ClientDemographics$Sex)
blah<-append(DirectionsClinicalExtract[["Sex"]], ClientDemographics[["Sex"]])
DirectionsClinicalExtract[["Sex"]]
ClientDemographics[["Sex"]]
ClientDemographics$sex
data.frame(ClientDemographics)
as.data.frame(ClientDemographics)
ClientDemographics<-as.data.frame(ClientDemographics)
View(ClientDemographics)
ClientDemographics <- read.csv(file = "ClientDemographics.csv", header=TRUE)
setwd("C:/Users/Owner/Dropbox/job stuff/Directions/Data migration/Import templates & data dictionary")
ClientDemographics <- read.csv(file = "ClientDemographics.csv", header=TRUE)
View(ClientDemographics)
blah<-append(DirectionsClinicalExtract[["Sex"]], ClientDemographics[["Sex"]])
str(blah)
blah
View(Sex)
?data.frame()
names(Sex)<-"Sex"
View(Sex)
rbind(ClientDemographics[["Sex"]],Sex)
View(ClientDemographics)
rbind(ClientDemographics[["Sex"]],Sex);
rbind(ClientDemographics, Sex);
newblankdf <-data.frame(names(ClientDemographics))
View(newblankdf)
?names
newblankdf <-data.frame(colnames(names(ClientDemographics)) #need to transpose this
newblankdf <-data.frame(colnames(names(ClientDemographics))) #need to transpose this
####
newblankdf <-data.frame(colnames(names(ClientDemographics))) #need to transpose this
source('C:/Users/Owner/Dropbox/job stuff/Directions/Data migration/migration.R', echo=TRUE)
newblankdf <-data.frame(colnames(ClientDemographics)) #need to transpose this
View(newblankdf)
newblankdf <-data.frame(t(names(ClientDemographics))) #need to transpose this
View(newblankdf)
names(newblankdf)<-names(ClientDemographics)
View(newblankdf)
rm(newblankdf)
newblankdf <-data.frame(NA)#need to set data as varnames?
names(newblankdf)<-names(ClientDemographics)
?data.frame
newblankdf <-data.frame(dim(ClientDemographics)) #need to set data as same width as ClientDemigraphics
names(newblankdf)<-names(ClientDemographics) #this works at setting the variable names. But you need the correct amount of col/row
View(newblankdf)
newblankdf <-data.frame([dim(ClientDemographics)]) #need to set data as same width as ClientDemigraphics
newblankdf <-data.frame(5,43) #need to set data as same width as ClientDemigraphics
view(newblankdf)
View(newblankdf)
newblankdf <-data.frame([5,43]) #need to set data as same width as ClientDemigraphics
newblankdf <-data.frame(c(5,43)) #need to set data as same width as ClientDemigraphics
View(newblankdf)
newblankdf <-data.frame(matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics))) #need to set data as same width as ClientDemigraphics
View(newblankdf)
names(newblankdf)<-names(ClientDemographics) #this works at setting the variable names. But you need the correct amount of col/row
View(newblankdf)
rbind(ClientDemographics[["Sex"]],Sex); #do I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
rbind(ClientDemographics[["Sex"]],newblankdf); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
rbind(ClientDemographics[["Sex"]],newblankdf); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
View(ClientDemographics)
View(ClientDemographics)
newblankdf <-data.frame(matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics) Sex = DirectionsClinicalExtract[["Sex"]])) #copies dimensions of ClientDemographics
newblankdf <-data.frame(matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics), Sex = DirectionsClinicalExtract[["Sex"]]))
newblankdf <-data.frame(matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics), "Sex" = DirectionsClinicalExtract[["Sex"]]))
newblankdf <-data.frame(matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics), "Sex" == DirectionsClinicalExtract[["Sex"]]))
View(newblankdf)
newblankdf <-data.frame(matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics), names = names(ClientDemographics)) #"Sex" == DirectionsClinicalExtract[["Sex"]]))
newblankdf <-data.frame(matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics), names = names(ClientDemographics))) #"Sex" == DirectionsClinicalExtract[["Sex"]]))
newblankdf <-data.frame(matrix(NA, "Sex" = DirectionsClinicalExtract[[Sex]], nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics), names = names(ClientDemographics))) #"Sex" == DirectionsClinicalExtract[["Sex"]]))
newblankdf <-data.frame(matrix(NA, "Sex" = DirectionsClinicalExtract[[Sex]], nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics))
names(newblankdf)<-names(ClientDemographics) #this works at setting the variable names.
newblankdf <-data.frame(matrix(NA, "Sex" = DirectionsClinicalExtract[[Sex]], nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
newblankdf <-data.frame(matrix("Sex" = DirectionsClinicalExtract[[Sex]], nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
newblankdf <-data.frame(matrix("Sex" = 1:3, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
newblankdf <-data.frame(matrix("test" = 1:3, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
newblankdf <-data.frame("test" = 1:3, matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
newblankdf <-data.frame("sex" = ClientDemographics[["Sex"]], matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
View(newblankdf)
newblankdf <-data.frame("sex" = DirectionsClinicalExtract[["PAT.SEX"]], matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
DirectionsClinicalExtract[["PAT.SEX"]]
newblankdf <-data.frame("sex" = DirectionsClinicalExtract[["Sex"]], matrix(NA, nrow = nrow(ClientDemographics), ncol = ncol(ClientDemographics)))
newblankdf <-data.frame("sex" = DirectionsClinicalExtract[["Sex"]], matrix(NA, ncol = ncol(ClientDemographics)))
view(newblankdf)
View(newblankdf)
names(newblankdf)<-names(ClientDemographics) #this works at setting the variable names.
View(newblankdf)
newblankdf <-data.frame(matrix(NA, ncol = ncol(ClientDemographics)))  #copies dimensions of ClientDemographics #removed nrows
View(newblankdf)
test<-rbind(DirectionsClinicalExtract[["Sex"]],newblankdf); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
View(test)
newblankdf <-data.frame(matrix(NA, nrow = nrow(DirectionsClinicalExtract), ncol = ncol(ClientDemographics)))  #copies dimensions of ClientDemographics #removed nrows
test<-rbind(DirectionsClinicalExtract[["Sex"]],newblankdf); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
View(test)
test<-cbind(DirectionsClinicalExtract[["Sex"]],newblankdf); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
View(test)
sex<-DirectionsClinicalExtract[["Sex"]]
test<-cbind(sex,newblankdf); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
View(test)
Sex<-DirectionsClinicalExtract[["Sex"]]
test<-cbind(Sex,newblankdf); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
View(test)
ClientDemographics_N <-data.frame(matrix(NA, nrow = nrow(DirectionsClinicalExtract), ncol = ncol(ClientDemographics)))  #copies dimensions of ClientDemographics #removed nrows
View(ClientDemographics_N)
Sex<-DirectionsClinicalExtract[["Sex"]]
ClientDemographics_N<-cbind(Sex,ClientDemographics_N); # I need to add all variables to "Sex" as NA ti get this to work? df$x <- NA
View(clc)
View(clc)
Transfer.data(MOBILE.PHONE,Mobile,ClientDemographics_N)
Transfer.data(MOBILE.PHONE,Mobile,ClientDemographics_N)
source(Transfer.data)
Transfer.data <- function(Com,Mas,df){ #com=communicare var name mas=mastercare var name df= Mastercare dataframe(the appropriate one). Reads from Direcitonsclinical, but perhaps I should make this changable?
Mas<-DirectionsClinicalExtract[[Com]] #does com in [] work here?
df<-cbind(Mas,df);
}
source(Transfer.data)
source(Transfer.data)
View(Transfer.data)
View(Transfer.data)
Transfer.data <- function(Com,Mas,df){ #com=communicare var name mas=mastercare var name df= Mastercare dataframe(the appropriate one). Reads from Direcitonsclinical, but perhaps I should make this changable?
Mas<-DirectionsClinicalExtract[[Com]] #does com in [] work here?
df<-cbind(Mas,df);
}
source(Transfer.data) #necessary?
Transfer.data(MOBILE.PHONE,Mobile,ClientDemographics_N) #test this
Transfer.data(MOBILE.PHONE,Mobile,ClientDemographics_N) #test this
DirectionsClinicalExtract$MOBILE.PHONE
Transfer.data("MOBILE.PHONE",Mobile,ClientDemographics_N) #test this
View(ClientDemographics_N)
Mobile<-DirectionsClinicalExtract[["MOBILE.PHONE"]]
ClientDemographics_N<-cbind(Mobile,ClientDemographics_N);
View(ClientDemographics_N)
ClientDemographics_N <-data.frame(matrix(NA, nrow = nrow(DirectionsClinicalExtract), ncol = ncol(ClientDemographics)))  #copies dimensions of ClientDemographics #removed nrows
View(ClientDemographics_N)
Com<-"MOBILE.PHONE"
Mas<-Mobile
df<-ClientDemographics_N
Transfer.data(Com,Mas,df)
View(ClientDemographics_N)
Com<-MOBILE.PHONE
rm(Mobile)
Mas<-"Mobile"
Transfer.data(Com,Mas,df)
View(df)
Mas<-Mobile
Transfer.data("MOBILE.PHONE",Mobile,ClientDemographics_N) #test this
View(ClientDemographics_N)
Mas<-DirectionsClinicalExtract$Com
"Mobile"<-DirectionsClinicalExtract[["MOBILE.PHONE"]]
Mas<-"Mobile"
rm(Mobile)
Mas<-DirectionsClinicalExtract[["MOBILE.PHONE"]]
?get()
test<-deparse(substitute(Sex))
?deparse
source(Transfer.data) #necessary?
View(Transfer.data)
View(Transfer.data)
Transfer.data <- function(Com,Mas,df){
deparse(subsitituste(Mas))<-Com #this line is problematic #try name(Mas)<-Com   #try attach()?  #Mas<-DirectionsClinicalExtract[[Com]] #does com in [] work here?
df<-cbind(Mas,df);
}
source(Transfer.data) #necessary?
View(Transfer.data)
View(Transfer.data)
Transfer.data("MOBILE.PHONE",Mobile,ClientDemographics_N) #test this
Transfer.data("MOBILE.PHONE","Mobile",ClientDemographics_N) #test this
Transfer.data <- function(Com,Mas,df){
deparse(substitute(Mas))<-Com #this line is problematic #try name(Mas)<-Com   #try attach()?  #Mas<-DirectionsClinicalExtract[[Com]] #does com in [] work here?
df<-cbind(Mas,df);
}
source(Transfer.data) #necessary?
Transfer.data("MOBILE.PHONE","Mobile",ClientDemographics_N) #test this
Com<-DirectionsClinicalExtract[["MOBILE.PHONE"]]
Mas<-"Mobile"
Transfer.data(Com,Mas,df)
?deparse
Transfer.data <- function(Com,Mas,df){
deparse(substitute(Mas))<-Com #this line is problematic #try name(Mas)<-Com   #try attach()?  #Mas<-DirectionsClinicalExtract[[Com]] #does com in [] work here?
df<-cbind(Mas,df);
}
source(Transfer.data) #
Transfer.data(Com,Mas,df)
Transfer.data <- function(Com,Mas,df){
deparse(substitute(Mas)) <- Com #this line is problematic #try name(Mas)<-Com   #try attach()?  #Mas<-DirectionsClinicalExtract[[Com]] #does com in [] work here?
df<-cbind(Mas,df);
}
source(Transfer.data) #necessary?
Transfer.data(Com,Mas,df)
